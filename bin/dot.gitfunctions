# ex: set filetype=sh fenc=utf-8 expandtab ts=4 sw=4 :


unalias git  &>/dev/null || true # allow proper sourcing in shell
unalias glol &>/dev/null || true # allow proper sourcing in shell
glol() {
    git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' "$@"
}

git_log_commit_message() {
    git log --pretty='%s' "$@"
}

git_is_current_repo_clean() {
    ! git status --porcelain | grep -qE .
}

git_has_anything_been_staged() {
    ! git diff --cached --quiet
}

git_branch_ref() {
    local f branch_name d h
    branch_name="$1"
    if [[ $branch_name == */* ]]; then
        h=remotes
    else
        h=heads
    fi
    d="$(git_root_dir)"
    f="$d/refs/$h/$branch_name"
    if [[ -f "$f" ]]; then
        < "$f"
    else
        grep -E " refs/$h/$branch_name\$" "$d/.git/packed-refs" |
            awk '{ print $1 }'
    fi
}

git_current_branch_old() {
    git rev-parse --abbrev-ref HEAD
}

git_current_branch () {
    local ref
    ref=$(__git_prompt_git symbolic-ref --quiet HEAD 2> /dev/null)
    local ret=$?
    if [[ $ret != 0 ]]
    then
        [[ $ret == 128 ]] && return
        ref=$(__git_prompt_git rev-parse --short HEAD 2> /dev/null)  || return
    fi
    echo ${ref#refs/heads/}
}

__git_prompt_git () {
    GIT_OPTIONAL_LOCKS=0 command git "$@"
}

_git_mrdirname () {
    local a
    a="$1"
    if [[ "$a" != */* ]]
    then
        echo .
        return
    fi
    while [[ "$a" == */ ]]
    do
        a="${a:0:${#a}-1}"
    done
    a="${a%/*}"
    if [[ -z "$a" ]]
    then
        echo "/"
    else
        echo "$a"
    fi
}

git_root_dir () {
    local a
    if [[ -n ${GIT_DIR:+1} ]]
    then
        [[ -f ${GIT_DIR}/index ]] && echo "${GIT_DIR}" && return 0
    fi
    a="$PWD"
    while [[ "$a" != "/" ]] && [[ "$a" != "." ]]
    do
        [[ -d "$a/.git" ]] && echo "$a" && return 0
        a="$(_git_mrdirname "$a")"
    done
    return 1
}

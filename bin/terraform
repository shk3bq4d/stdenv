#!/usr/bin/env bash
# ex: set filetype=sh :
##
##Usage:  __SCRIPT__ REMOTEHOST [REMOTEPORT]
##configures whatever action with whatever config
##    REMOTEHOST: remote host where to ssh
##    REMOTEPORT: JMX port (default: 12345)
##
## Author: Jeff Malone, 04 Jul 2018
##

set -euo pipefail

# function usage() { sed -r -n -e s/__SCRIPT__/$(basename $0)/ -e '/^##/s/^..// p'   $0 ; }

# [[ $# -eq 1 && ( $1 == -h || $1 == --help ) ]] && usage && exit 0

# [[ $# -lt 1 || $# -gt 2 ]] && echo FATAL: incorrect number of args && usage && exit 1

# for i in sed which grep; do ! command -v $i &>/dev/null && echo FATAL: unexisting dependency $i && exit 1; done

# DIR="$( cd -P "$( dirname "$(readlink -f "${BASH_SOURCE[0]}")" )" && pwd )"

# exec > >(tee -a ~/log/$(basename $0 .sh).log)
# exec > >(tee >(logger --id=$$ -t "$(basename $0)" -p user.info ))
# exec 2>&1

# test -z "${HOSTNAMEF:-}" && HOSTNAMEF=$(hostname -f)
#
terraform_version=0.11.8
terraform_version=0.11.10
terraform_version=0.11.13
terraform_version=0.12.6
terraform_version=0.12.8
terraform_version=0.12.12
terraform_version=0.12.16
terraform_version=0.12.17
terraform_version=0.12.18
terraform_version=0.12.19
terraform_version=0.12.20
terraform_version=0.12.21
terraform_version=0.12.23
terraform_version=0.12.24
terraform_version=0.12.25
terraform_version=0.12.26

BIN="$HOME/bin/terraform-$terraform_version"

if [[ ! -f $BIN ]]; then
    echo -n "$BIN doesn't exist. Would you like to download it? (yN): "
    read _read
    echo # read
    case "${_read,,}" in \
    y|Y|yes)
        true
        ;;
    *)
        exit 1
        ;;
    esac
    curl -Os https://releases.hashicorp.com/terraform/$terraform_version/terraform_"$terraform_version"_linux_amd64.zip
    unzip -d ~/.tmp terraform_"$terraform_version"_linux_amd64.zip
    mv ~/.tmp/terraform ~/bin/terraform-$terraform_version
    rm terraform_"$terraform_version"_linux_amd64.zip || true
fi

case $(hostname -f) in \
apr16*)
    if [[ "$PWD" = */dcn/iaac* ]]; then
        #export http_proxy=http://127.0.0.1:9843
        #export http_proxy=socks5://127.0.0.1:29844
        export http_proxy=127.0.0.1:29843
        export https_proxy=$http_proxy
    fi
    ;;
esac

ERED=$'\033[0;31m'    # red
EBLUE=$'\033[0;34m'    # blue
EOFF=$'\033[m'
if [[ "$PWD" = */dcn/iaac* ]]; then
    # if an executable file named terraform* exist in current directory
    # verify that _MR_TF_DIR is set to the correct value which will guarantee
    # that the current script caller is one of the terraform* script in CWD
    PWD_TF_SCRIPTS="$(   find "$PWD" -maxdepth 1 -not -type d -name 'terraform*' -executable)"
    NB_PWD_TF_SCRIPTS="$(find "$PWD" -maxdepth 1 -not -type d -name 'terraform*' -executable -printf '.' | wc -c)"
    if [[ -n "$PWD_TF_SCRIPTS" ]]; then
        if [[ "${_MR_TF_DIR:-}" != "$PWD" ]]; then
            if [[ $NB_PWD_TF_SCRIPTS -eq 1 ]]; then
                echo "${EBLUE}auto-executing $PWD_TF_SCRIPTS $@$EOFF"
                exec "$PWD_TF_SCRIPTS" "$@"
                exit $?
            fi
            >&2 echo "${ERED}FATAL ./terraform-{uat,prod}: NB scripts is $NB_PWD_TF_SCRIPTS, _MR_TF_DIR != PWD: ${_MR_TF_DIR:-} != ${PWD}$EOFF" && exit 1
        fi
    elif [[ ! -f "$PWD/start.sh" ]]; then
        >&2 echo "${ERED}FATAL: not a file $PWD/start.sh$EOFF" && exit 1
    else
        if [[ "${_MR_TF_DIR:-}" != "$PWD" ]]; then
            echo "${EBLUE}auto-sourcing ${PWD}start.sh$EOFF"
            source start.sh
        fi
        if [[ "$_MR_TF_DIR" != "$PWD" ]]; then
            >&2 echo "${ERED}FATAL start.sh: _MR_TF_DIR != PWD: $_MR_TF_DIR != ${PWD}$EOFF" && exit 1
        fi
    fi
fi

~/bin/terraform-$terraform_version "$@"
exit $?
